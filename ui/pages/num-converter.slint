
import { Button, VerticalBox, LineEdit, GridBox } from "std-widgets.slint";
import { Page } from "page.slint";


// TODO consider switching to TextInput
component InputBox inherits LineEdit {
    min-width: 200px;
    min-height: 24px;
    max-width: 400px;
    max-height: 60px;

    preferred-width: 240px;
    preferred-height: 40px;

    input-type: decimal;
}

component ConversionBox {
    in property <string> base : "Default";
    in property <string> type : "Default";
    in-out property <string> text;
    in property <InputType> input-type;
    callback edited(string);
    HorizontalLayout {
        spacing: 9px;
        Text {
            min-width: 40px;
            max-width: 48px;

            vertical-alignment: center;
            horizontal-alignment: right;

            letter-spacing: 1px;
            font-weight: 400;
            font-size: 16px;
            text: base;
        }
        InputBox {
            input-type: input-type;
            placeholder-text: type;
            edited(n) => {edited(n)}
            text <=> text;
        }
    }
}

export global ConversionCallback {
    callback request-convert-number(int, int, string) -> string;
    
}

export component NumberConverter inherits Page {

    title: "Number Base Converter";
    description: "Convert an integer from any integer base to any other integer base.";

    preferred-height: 400px;
    preferred-width: 800px;

    in property <string> decEdit;
    in property <string> binEdit;
    in property <string> hexEdit;
    in property <string> octEdit;
    
    GridBox {
        spacing-horizontal: 40px;
        spacing-vertical: 26px;

        Rectangle {col: 0;}
        Rectangle {col: 2;}
        Rectangle {col: 4;}
        Rectangle {row: 0;}
        Rectangle {row: 2;}
        Rectangle {row: 4;}

        //padding-right: 80px;

        dec := ConversionBox {
            row: 1;
            col: 1;

            base: "Dec";
            type: "Input a decimal number:";
            edited(decEdit) => {
                bin.text = ConversionCallback.request-convert-number(10, 2, decEdit);
                hex.text = ConversionCallback.request-convert-number(10, 16, decEdit);
                oct.text = ConversionCallback.request-convert-number(10, 8, decEdit);
            }
        }

        bin := ConversionBox {
            row: 1;
            col: 3;

            base: "Bin";
            type: "Input a binary number:";
            edited(binEdit) => {
                dec.text = ConversionCallback.request-convert-number(2, 10, binEdit);
                hex.text = ConversionCallback.request-convert-number(2, 16, binEdit);
                oct.text = ConversionCallback.request-convert-number(2, 8, binEdit);
            }
        }

        hex := ConversionBox {
            row: 3;
            col: 1;

            base: "Hex";
            type: "Input a hex number:";
            input-type: text;
            edited(hexEdit) => {
                dec.text = ConversionCallback.request-convert-number(16, 10, hexEdit);
                bin.text = ConversionCallback.request-convert-number(16, 2, hexEdit);
                oct.text = ConversionCallback.request-convert-number(16, 8, hexEdit);
            }
        }

        oct := ConversionBox {
            row: 3;
            col: 3;

            base: "Oct";
            type: "Input an octal number:";
            edited(octEdit) => {
                dec.text = ConversionCallback.request-convert-number(8, 10, octEdit);
                bin.text = ConversionCallback.request-convert-number(8, 2, octEdit);
                hex.text = ConversionCallback.request-convert-number(8, 16, octEdit);
            }
        }
    }
}
