
import { Button, VerticalBox, LineEdit, GridBox, HorizontalBox, ScrollView } from "std-widgets.slint";
import { Page } from "page.slint";


// TODO consider switching to TextInput
component InputBox inherits LineEdit {
    min-width: 200px;
    min-height: 24px;
    max-width: 400px;
    max-height: 66px;

    preferred-width: 240px;
    preferred-height: 40px;

    input-type: decimal;
}

component ConversionBox {
    in property <string> base : "Default";
    in property <string> type : "Default";
    in-out property <string> text;
    in property <InputType> input-type;
    callback edited(string);

    HorizontalLayout {
        spacing: 9px;
        Text {
            min-width: 40px;
            max-width: 48px;

            vertical-alignment: center;
            horizontal-alignment: right;

            letter-spacing: 1px;
            font-weight: 400;
            font-size: 16px;
            text: base;
        }
        InputBox {
            input-type: input-type;
            placeholder-text: type;
            edited(n) => {edited(n)}
            text <=> text;
        }
    }
}

component CustomBox {
    in property <string> base : "";
    in-out property <string> text;
    callback edited(string);
    in property <string> placeholder;
    in property <bool> enabled;
    in property <TextHorizontalAlignment> horizontal-alignment;

    HorizontalBox {
        InputBox {
            horizontal-alignment: horizontal-alignment;
            input-type: InputType.text;
            placeholder-text: placeholder;
            edited(n) => {edited(n)}
            text <=> text;
            enabled <=> enabled;

            width: 440px;
            height: 80px;
            
        }

        Rectangle {
            width: 40px;
        }
    
        LineEdit {
            width: 140px;
            height: 40px;

            horizontal-alignment: center;
            input-type: decimal;
            placeholder-text: "Base:";
        }
    }
    
}

export global ConversionCallback {
    callback request-convert-number(int, int, string) -> string;
    
}

export component NumberConverter inherits Page {

    title: "Number Base Converter";
    description: "Convert an integer from any integer base to any other integer base.";

    preferred-height: 400px;
    preferred-width: 800px;

    in property <string> decEdit;
    in property <string> binEdit;
    in property <string> hexEdit;
    in property <string> octEdit;
    
    GridBox {
        //spacing-horizontal: 40px;
        //spacing-vertical: 26px;

        Rectangle {
            col: 0;
            rowspan: 6;

            min-width: 40px;
            min-height: 2px;
        }
        Rectangle {
            col: 2;
            row: 1;
            rowspan: 3;

            min-width: 40px;
            min-height: 4px;
            max-width: 80px;
            horizontal-stretch: 0.6;
        }
        Rectangle {
            col: 4;
            row: 0;
            rowspan: 6;

            min-width: 40px;
            min-height: 8px;
        }
        Rectangle {
            row: 0;
            col: 1;
            colspan: 3;

            min-width: 2px;
            min-height: 40px;
            max-height: 140px;
        }
        Rectangle {
            row: 2;
            col: 1;
            colspan: 3;

            min-width: 4px;
            min-height: 8px;
            max-height: 40px;
        }
        Rectangle {
            row: 4;
            col: 1;
            colspan: 3;

            min-width: 2px;
            min-height: 4px;

            max-height: 40px;
        }

        //padding-right: 80px;

        dec := ConversionBox {
            row: 1;
            col: 1;

            base: "Dec";
            type: "Input a decimal number:";
            edited(decEdit) => {
                bin.text = ConversionCallback.request-convert-number(10, 2, decEdit);
                hex.text = ConversionCallback.request-convert-number(10, 16, decEdit);
                oct.text = ConversionCallback.request-convert-number(10, 8, decEdit);
            }
        }

        bin := ConversionBox {
            row: 1;
            col: 3;

            base: "Bin";
            type: "Input a binary number:";
            edited(binEdit) => {
                dec.text = ConversionCallback.request-convert-number(2, 10, binEdit);
                hex.text = ConversionCallback.request-convert-number(2, 16, binEdit);
                oct.text = ConversionCallback.request-convert-number(2, 8, binEdit);
            }
        }

        hex := ConversionBox {
            row: 3;
            col: 1;

            base: "Hex";
            type: "Input a hex number:";
            input-type: text;
            edited(hexEdit) => {
                dec.text = ConversionCallback.request-convert-number(16, 10, hexEdit);
                bin.text = ConversionCallback.request-convert-number(16, 2, hexEdit);
                oct.text = ConversionCallback.request-convert-number(16, 8, hexEdit);
            }
        }

        oct := ConversionBox {
            row: 3;
            col: 3;

            base: "Oct";
            type: "Input an octal number:";
            edited(octEdit) => {
                dec.text = ConversionCallback.request-convert-number(8, 10, octEdit);
                bin.text = ConversionCallback.request-convert-number(8, 2, octEdit);
                hex.text = ConversionCallback.request-convert-number(8, 16, octEdit);
            }
        }

        ScrollView {
            row: 5;
            col: 1;
            colspan: 3;

            viewport-height: 400px;
            viewport-width: 400px;


            cus1 := CustomBox {
                x: 0;
                y: 0;
        
                base: "";
                placeholder: self.base != "" ? "Input a number in base " + self.base : "Input a base first ---->";
                enabled: self.base != "" ? true : false;
    
                edited(cus1Edit) => {
                    dec.text = ConversionCallback.request-convert-number(self.base.to-float(), 10, cus1Edit);
                    bin.text = ConversionCallback.request-convert-number(self.base.to-float(), 2, cus1Edit);
                    hex.text = ConversionCallback.request-convert-number(self.base.to-float(), 16, cus1Edit);
                }
            }
        }
    }

}
